{"version":3,"sources":["common/img/technology/1.png","../node_modules/nanoid/index.browser.js","pages/tecnology/index.js"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Tecnology","React","useState","img","TecImg1","title","content","tecData","className","to","map","tecdata","src"],"mappings":"4NAAe,MAA0B,8BCiCzC,IA2CIA,EAAS,WAKX,IAL0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAG3CA,KAAQ,CAMb,IAAIM,EAAqB,GAAdJ,EAAMF,GAGfC,GAFEK,EAAO,GAEHA,EAAKC,SAAS,IACXD,EAAO,IAETA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,G,OC/FM,SAASQ,IAAa,IAAD,EACLC,IAAMC,SAC7B,CACI,CAACV,GAAGF,IAASa,IAAIC,EAAQC,MAAM,gBAAgBC,QAAQ,wjEACvD,CAACd,GAAGF,IAASa,IAAIC,EAAQC,MAAM,gBAAgBC,QAAQ,ouBACvD,CAACd,GAAGF,IAASa,IAAIC,EAAQC,MAAM,gBAAgBC,QAAQ,ouBACvD,CAACd,GAAGF,IAASa,IAAIC,EAAQC,MAAM,gBAAgBC,QAAQ,suBAN/B,mBAC3BC,EAD2B,UAShC,OACI,sBAAKC,UAAU,YAAf,UACI,sBAAKA,UAAU,mBAAf,UACC,qBAAMA,UAAU,kBAAhB,sCACA,sBAAOA,UAAU,mBAAjB,UAAoC,eAAC,IAAD,CAAMC,GAAG,IAAT,6CAApC,UAEG,qBAAKD,UAAU,mBAEf,6BAEID,EAAQG,KAAI,SAACC,GACjC,OAEQ,6BAEK,sBAAKH,UAAU,oBAAf,UACD,qBAAKA,UAAU,wBAAf,SACJ,qBAAKI,IAAKD,EAAQR,QAErB,qBAAKK,UAAU,0BAAf,SAA0CG,EAAQN,QACnD,qBAAKG,UAAU,yBAAf,SAAyCG,EAAQL,UACjD,eAAC,IAAD,CAAMG,GAAG,IAAT,cAAc,qBAAKD,UAAU,2BAAf,sCARDG,EAAQnB","file":"static/js/8.a55a194b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/1.cdb70dde.png\";","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React from 'react'\r\nimport './index.css'\r\nimport {Link} from 'react-router-dom'\r\nimport TecImg1 from '../../common/img/technology/1.png'\r\nimport {nanoid} from 'nanoid'\r\nexport default function Tecnology() {\r\n  const [tecData,setTecData]=  React.useState(\r\n        [\r\n            {id:nanoid(),img:TecImg1,title:'ScrapeStudent',content:'1.关于验证码图片抓取两种方式，一种是用node fs下载验证码图片，但是你会发现当你抓取图片的时候，验证码图片就会自动刷新一次，一开始我以为它是100张随机图，后来发现即使是随机数一样每一次显示的验证码图片也不一样，这条路不好走哈哈啊哈哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈走哈哈啊哈'},\r\n            {id:nanoid(),img:TecImg1,title:'ScrapeStudent',content:'1.关于验证码图片抓取两种方式，一种是用node fs下载验证码图片，但是你会发现当你抓取图片的时候，验证码图片就会自动刷新一次，一开始我以为它是100张随机图，后来发现即使是随机数一样每一次显示的验证码图片也不一样，这条路不好走xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'},\r\n            {id:nanoid(),img:TecImg1,title:'ScrapeStudent',content:'1.关于验证码图片抓取两种方式，一种是用node fs下载验证码图片，但是你会发现当你抓取图片的时候，验证码图片就会自动刷新一次，一开始我以为它是100张随机图，后来发现即使是随机数一样每一次显示的验证码图片也不一样，这条路不好走xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'},\r\n            {id:nanoid(),img:TecImg1,title:'ScrapeStudent',content:'1.关于验证码图片抓取两种方式，一种是用node fs下载验证码图片，但是你会发现当你抓取图片的时候，验证码图片就会自动刷新一次，一开始我以为它是100张随机图，后来发现即使是随机数一样每一次显示的验证码图片也不一样，这条路不好走xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'}\r\n        ]\r\n    )\r\n    return (\r\n        <div className='tecnology'>\r\n            <div className='tecnology-header'>\r\n             <div  className='tecnology-share'>技术分享</div>  \r\n             <div   className='tecnology-return'><Link to='/'>返回首页{`>>`}</Link> </div> \r\n             </div>\r\n                <div className='tecnology-line'></div>\r\n               \r\n                <ul>\r\n                {\r\n                    tecData.map((tecdata)=>{\r\nreturn(\r\n   \r\n        <li key={tecdata.id}>\r\n           \r\n             <div className='tecnology-content'>\r\n            <div className='tecnology-content-img'>\r\n        <img src={tecdata.img}></img>\r\n    </div>\r\n     <div className='tecnology-content-title'>{tecdata.title}</div>\r\n    <div className='tecnology-content-text'>{tecdata.content}</div>\r\n    <Link to='/'> <div className='tecnology-content-detail'>[详情...]</div></Link>\r\n    </div>\r\n    </li>\r\n   \r\n)\r\n                    })\r\n                }\r\n                 </ul>\r\n                 </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}