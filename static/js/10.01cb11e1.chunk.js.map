{"version":3,"sources":["../node_modules/nanoid/index.browser.js","common/img/wheel/1.png","common/img/wheel/2.png","common/img/wheel/3.png","common/img/wheel/4.png","common/img/wheel/5.png","pages/essay/index.js"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Essay","img","loadingImg","title","url1","url2","scrapeImg","albxImg","smallcx","czymf","className","map","item","index","src","href"],"mappings":"6IAiCA,IA2CIA,EAAS,WAKX,IAL0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAG3CA,KAAQ,CAMb,IAAIM,EAAqB,GAAdJ,EAAMF,GAGfC,GAFEK,EAAO,GAEHA,EAAKC,SAAS,IACXD,EAAO,IAETA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,I,sHCpGM,MAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,8BCA1B,MAA0B,8B,gBCQ1B,SAASQ,IACpB,IAAMC,EAAI,CACN,CACIA,IAAIC,EACJC,MAAM,kCACNC,KAAK,2CACLC,KAAK,8CAET,CACIJ,IAAIK,EACJH,MAAM,wBACNC,KAAK,0CACLC,KAAK,8CAET,CACIJ,IAAIM,EACJJ,MAAM,0CACNC,KAAK,wCACLC,KAAK,8CAET,CACIJ,IAAIO,EACJL,MAAM,yDACNC,KAAK,2CACLC,KAAK,8CACP,CACEJ,IAAIQ,EACJN,MAAM,sCACNC,KAAK,wCACLC,KAAK,+CAGb,OACI,qBAAKK,UAAU,QAAf,SACI,qBAAKA,UAAU,YAAf,SAEIT,EAAIU,KAAI,SAACC,EAAKC,GACV,OACI,sBAAKH,UAAU,UAAf,UACxB,qBAAKI,IAAKF,EAAKX,IAAKS,UAAU,aAC9B,qBAAKA,UAAU,YAAf,SACKE,EAAKT,QAEV,sBAAKO,UAAU,aAAf,UACI,mBAAGK,KAAMH,EAAKR,KAAd,SAAoB,8DACpB,uCACA,mBAAGW,KAAMH,EAAKP,KAAd,SAAoB,mEAR8Bf","file":"static/js/10.01cb11e1.chunk.js","sourcesContent":["// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export default __webpack_public_path__ + \"static/media/1.a861397d.png\";","export default __webpack_public_path__ + \"static/media/2.bccb501f.png\";","export default __webpack_public_path__ + \"static/media/3.0834b512.png\";","export default __webpack_public_path__ + \"static/media/4.e37f9ed4.png\";","export default __webpack_public_path__ + \"static/media/5.0d8d5f32.png\";","import React from 'react'\r\nimport './index.css'\r\nimport loadingImg from '../../common/img/wheel/1.png'\r\nimport scrapeImg from '../../common/img/wheel/2.png'\r\nimport albxImg from '../../common/img/wheel/3.png'\r\nimport smallcx from '../../common/img/wheel/4.png'\r\nimport czymf from '../../common/img/wheel/5.png'\r\nimport {nanoid} from 'nanoid'\r\nexport default function Essay() {\r\n    const img=[\r\n        {\r\n            img:loadingImg,\r\n            title:'Loading旋转效果',\r\n            url1:'http://aays.top/wheel/loading/index.html',\r\n            url2:'https://github.com/Escaay?tab=repositories'\r\n        },\r\n        {\r\n            img:scrapeImg,\r\n            title:'puppeteer爬虫',\r\n            url1:'http://aays.top/wheel/scrape/index.html',\r\n            url2:'https://github.com/Escaay?tab=repositories'\r\n        },\r\n        {\r\n            img:albxImg,\r\n            title:'bootstrap响应式开发',\r\n            url1:'http://aays.top/wheel/albx/index.html',\r\n            url2:'https://github.com/Escaay?tab=repositories'\r\n        },\r\n        {\r\n            img:smallcx,\r\n            title:'美味山苏微信小程序',\r\n            url1:'http://aays.top/wheel/smallcx/index.html',\r\n            url2:'https://github.com/Escaay?tab=repositories'\r\n        },{\r\n            img:czymf,\r\n            title:'创造与魔法(php)',\r\n            url1:'http://aays.top/wheel/czymf/index.php',\r\n            url2:'https://github.com/Escaay?tab=repositories'\r\n        },\r\n    ]\r\n    return (\r\n        <div className='essay'>\r\n            <div className='essay-img'>\r\n            {\r\n                img.map((item,index)=>{\r\n                    return (\r\n                        <div className='img-box' key={nanoid()}>\r\n<img src={item.img} className='img-item'/>\r\n<div className='img-title'>\r\n    {item.title}\r\n</div>\r\n<div className='img-bottom'>\r\n    <a href={item.url1}><span>成品展示</span></a>\r\n    <span> | </span>\r\n    <a href={item.url2}><span>代码地址</span></a>\r\n</div>\r\n</div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}